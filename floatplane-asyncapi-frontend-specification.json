{
	"asyncapi": "2.4.0",
	"info": {
		"title": "Floatplane Async Frontend API",
		"version": "3.9.1",
		"description": "Homepage: [https:\/\/jman012.github.io\/FloatplaneAPIDocs](https:\/\/jman012.github.io\/FloatplaneAPIDocs)\r\n\r\nThis document describes the asynchronous\/event-driven API layer of [https:\/\/www.floatplane.com](https:\/\/www.floatplane.com), a content creation and video streaming website created by Floatplane Media Inc. and Linus Media Group, where users can support their favorite creates via paid subscriptions in order to watch their video and livestream content in higher quality and other perks.\r\n\r\nThis API is specific to the frontend activities of the Floatplane website, which is responsible for pushing new-post notifications to the client, and is meant for a connection to www.floatplane.com. If you are looking for the chat\/livestream async API layer of Floatplane (chat.floatplane.com), please visit [this document](..\/AsyncAPIChat) instead.\r\n\r\n## Implementation Notes\r\n\r\nThis document is an AsyncAPI implementation on top of a Socket.IO connection. AsyncAPI does not have any specifics for Socket.IO, and so any automatic code-generation from this document may not work 100% out-of-the-box on a WebSocket connection. At best, it will provide all of the proper models needed for the different events and messages. But it may require some glue code to get it working properly with Sails. See the below section on the difference between Socket.IO, Sails, and Floatplane for this socket connection.\r\n\r\nIt is recommended for any client implementation to use a Socket.IO reference library implementation [in your language of choice](https:\/\/github.com\/orgs\/socketio\/repositories?q=socket.io-client&type=all&language=&sort=) with this document. A version of this document for Sails would be preferred, but there is only a single client reference implementation (JavaScript), and the Sails layer on top of Socket.IO is fairly straightforward.\r\n\r\n## Technology Notes\r\n\r\nFloatplane's backend primarily uses [Sails](https:\/\/sailsjs.com\/) and the website UI uses an Angular frontend along with Sails' socket connection for low-latency request\/response and event-driven architecture. Sails is an MVC framework for making Node.js websites and APIs. Sails' socket connection is built on three tiers of technology that should be understood when implementing this API:\r\n\r\n1. [Engine.IO](https:\/\/socket.io\/docs\/v4\/how-it-works\/#engineio) ([GitHub](https:\/\/github.com\/socketio\/engine.io))\r\n\t1. This layer is responsible for abstracting the socket connection for reliability. It primarily uses WebSockets as the communication channel, but will fall back to HTTP long-polling if WebSockets are not available.\r\n\t1. It provides a rather simple protocol on top of the below items, usually prefixing a WebSocket frame with a single byte indicating the packet type.\r\n\t1. Engine.IO does have its own connection mechanism, and it would be best to have this implemented by a library rather than by hand. While it has a reference [JavaScript\/Node.JS](https:\/\/github.com\/socketio\/engine.io-client) implementation and a [Java](https:\/\/github.com\/socketio\/engine.io-client-java) implementation, it is recommended to use a Socket.io library outlined below.\r\n\t1. On the wire, you'll see connection frames with the `0` prefix, pings\/pongs as a single byte (`2`\/`3`), or messages with the `4` prefix. If you are analyzing the WebSocket frames directly, it would be beneficial to familiarize yourself with the [Engine.IO protocol](https:\/\/github.com\/socketio\/engine.io-protocol).\r\n1. [Socket.IO](https:\/\/socket.io\/)\r\n\t1. This builds on Engine.IO by adding reconnection, packet buffering, acknowledgements (request\/response), broadcasting, and multiplexing (namespaces) features.\r\n\t1. Note that Floatplane is **using Socket.IO version v2**. Not the latest v4. This may affect which client Socket.IO library implementation you use, as not all latest-version client libraries support v2.\r\n\t1. It would be useful to learn how the [Socket.IO Protocol](https:\/\/github.com\/socketio\/socket.io-protocol) is structured. In short, events are prefixed with `2`, acknowledgements are prefixed with `3` (both are after the Engine.IO prefixes\/headers), and the data of the event is stored as a JSON-encoded array of items, where the first item is always a string identifying the event name, and optional subsequent items are the arguments to the event.\r\n1. [Sails Socket Client](https:\/\/sailsjs.com\/documentation\/reference\/web-sockets\/socket-client)\r\n\t1. The Sails socket client primarily adds HTTP request\/response emulation on top of Socket.IO. For instance, it adds HTTP verbs such as `GET`, `POST`, etc. onto the socket connection, and uses Socket.IO's acknowledgements in order to send back a response body.\r\n\t1. This is implemented by emitting Socket.IO events where the event name is the HTTP verb (e.g. `\"get\"`, `\"post\"`, etc.), and the first and only argument to the Socket.IO event is a data structure with Sails-specific fields: `method`, `headers`, `url`, and `data`. The `data` field is where the application-specific data is stored in the event.\r\n\t1. The Sails response is sent back to the client as a Socket.IO acknowledgement in a similar format with the `body`, `headers`, and `statusCode` fields as the first and only argument in the ack.\r\n\t1. There is a reference Sails client library for [JavaScript](https:\/\/github.com\/balderdashy\/sails.io.js), but there is no other official reference implementation.\r\n1. Floatplane\r\n\t1. The final layer is the application Floatplane itself, which is described in this document.\r\n\r\n### Over-the-Wire Examples\r\n\r\nThe following list shows some examples of what a raw WebSocket connection might entail, and splits up the data between the various layers. This section is mostly to help with debugging raw connections, and understanding the technical stack of Floatplane.\r\n\r\n1. C->S `GET wss:\/\/www.floatplane.com\/socket.io\/?__sails_io_sdk_version=0.13.8&__sails_io_sdk_platform=browser&__sails_io_sdk_language=javascript&EIO=3&transport=websocket`\r\n\t1. The client first connects directly to the WebSocket endpoint, and receives an `HTTP 101 Switching Protocols`.\r\n\t1. This is Engine.IO only.\r\n1. S->C `0{\"sid\":\"b1VcCLtZ1SUXiYEGAB49\",\"upgrades\":[],\"pingInterval\":25000,\"pingTimeout\":60000}`\r\n\t1. The WebSocket connection is established and the server sends the open packet.\r\n\t1. `0`: Engine.IO open header.\r\n\t1. `{\"sid\":\"b1VcCLtZ1SUXiYEGAB49\",\"upgrades\":[],\"pingInterval\":25000,\"pingTimeout\":60000}`: Engine.IO open payload.\r\n\t1. Note that if using a proper Engine.IO or Socket.IO implementation, you will not need to see or handle this in your code.\r\n\t1. This is Engine.IO only.\r\n1. S->C `40`\r\n\t1. The server automatically connects the client to the Socket.IO default namespace (`\/`).\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `0`: Socket.IO connect header.\r\n\t1. Note that the namespace `\/` is implied but not included in this message due to the Socket.IO protocol marking is as optional. The non-encoded message for this in Socket.IO would look like `{\"type\": 0,\"nsp\": \"\/admin\",\"data\": {}}`.\r\n\t1. Note that if using a proper Socket.IO library implementation, you will not need to see or handle this in your code.\r\n\t1. This is Engine.IO and Socket.IO only. \r\n1. C->S: `420[\"post\",{\"method\":\"post\",\"headers\":{},\"data\":{},\"url\":\"\/api\/v3\/socket\/connect\"}]`\r\n\t1. The client posts to the socket connect URL in Sails, in order for Floatplane to connect and listen for events.\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `20`: Socket.IO header.\r\n\t\t1. `2`: Marks that this message is an Event.\r\n\t\t1. `0`: Id parameter. Needed for the following acknowledgement.\r\n\t1. `[\"post\",{\"method\":\"post\",\"headers\":{},\"data\":{},\"url\":\"\/api\/v3\/socket\/connect\"}]`: Socket.IO event data.\r\n\t\t1. `\"post\"`: Socket.IO event name.\r\n\t\t\t1. This event name is reserved and used by Sails.\r\n\t\t1. `{\"method\":\"post\",\"headers\":{},\"data\":{},\"url\":\"\/api\/v3\/socket\/connect\"}`: Socket.IO event argument for the Sails `\"post\"` event.\r\n\t\t\t1. `\"method\":\"post,\"url\":\"\/api\/v3\/socket\/connect\"`: This Sails POST request is destined for the `\/api\/v3\/socket\/connect` endpoint.\r\n\t\t\t1. `\"data\":{}`: Sails request body.\r\n\t\t\t\t1. `{}`: No Floatplane data in the request.\r\n1. S->C: `430[{\"body\":{\"message\":\"User sync setup.\"},\"headers\":{},\"statusCode\":200}]`\r\n\t1. The Floatplane server responds to the POST request in Sails, telling the Floatplane client that it is connected.\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `30`: Socket.IO header.\r\n\t\t1. `3`: Marks that this message is an Acknowledgement\r\n\t\t1. `0`: Id parameter. Marks that it is acknowledging event number 0.\r\n\t1. `[{\"body\":{\"message\":\"User sync setup.\"},\"headers\":{},\"statusCode\":200}]`: Socket.IO acknowledgement data.\r\n\t\t1. `{\"body\":{\"message\":\"User sync setup.\"},\"headers\":{},\"statusCode\":200}`: The only argument in the Socket.IO ack\r\n\t\t\t1. `\"statusCode\":200`: Sails HTTP response status code.\r\n\t\t\t1. `\"body\":{\"message\":\"User sync setup.\"}`: Sails HTTP response body.\r\n\t\t\t\t1. `{\"message\":\"User sync setup.\"}`: Floatplane connection response.\r\n1. S->C: `421[\"syncEvent\",{\"event\": \"creatorNotification\",\"data\": {\"id\": \"CONTENT_POST_RELEASE:yQDi4v3EMc\",\"eventType\": \"CONTENT_POST_RELEASE\",...}}]`\r\n\t1. The Floatplane server sends an event to the client about a new post notification.\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `2`: Socket.IO event header.\r\n\t1. `[\"syncEvent\",{\"event\": \"creatorNotification\",\"data\": {\"id\": \"CONTENT_POST_RELEASE:yQDi4v3EMc\",\"eventType\": \"CONTENT_POST_RELEASE\",...}}]`: Socket.IO event data.\r\n\t\t1. `\"syncEvent\"`: Socket.IO event name.\r\n\t\t\t1. This name is used by the Floatplane application. The server is using the Sails socket to emit the event, but does not add anything to the request. It is basically emitting directly on the socket from Socket.IO.\r\n\t\t1. `{\"event\": \"creatorNotification\",\"data\": {\"id\": \"CONTENT_POST_RELEASE:yQDi4v3EMc\",\"eventType\": \"CONTENT_POST_RELEASE\",...}}`: Socket.IO event argument for the `\"syncEvent\"` event.\r\n\t\t\t1. This is structured entirely by Floatplane.\r\n\r\n## Document Organization\r\n\r\nThis document is primarily organized around the AsyncAPI blog post on Socket.IO ([Part 1](https:\/\/www.asyncapi.com\/blog\/socketio-part1), and [Part 2](https:\/\/www.asyncapi.com\/blog\/socketio-part2)). The extension [`x-ack`](https:\/\/www.asyncapi.com\/blog\/socketio-part2#message-ack-object) is used in order to model Socket.IO's acknowledgement feature that emulates the request\/response paradigm. The Socket.IO acknowledgement does not have an event name that goes over the wire, and instead directly references the initiating event via its unique identifier. As such, acknowledgements are not specified in the AsyncAPI's channel's publisher or subscriber operators.\r\n\r\nThis document also manually incorporates features of Sails on top of Socket.IO. It does so manually because the Sails abstraction is rather light, by basically specifying event names and models for data to pass through for requests and responses to virtual endpoints. Sails introduces the event names `\"get\"`, `\"post\"`, `\"put\"`, and other HTTP verbs, where the event argument (request) is JSON in the form of:\r\n\r\n```json\r\n{\r\n\t\"method\": \"get\",\r\n\t\"headers\": {},\r\n\t\"body\": {\r\n\t\t...\r\n\t},\r\n\t\"url\": \"\/api\/v3\/...\"\r\n}\r\n```\r\n\r\nAnd the acknowledgement\/response argument is JSON in the form of:\r\n\r\n```json\r\n{\r\n\t\"body\": {\r\n\t\t...\r\n\t},\r\n\t\"headers\": {},\r\n\t\"statusCode: 200\r\n}\r\n```\r\n\r\nWhere `body` in each is specific to Floatplane. The rest of the data structure emulates HTTP requests and responses. As such, this AsyncAPI document explicitly models these structures around the Floatplane-specific requests and responses. \r\n\r\nFinally, because Sails uses generic `\"get\"`, `\"post\"`, etc. event names for multiple types of actualized events on Socket.IO, a single AsyncAPI Operator is defined for each of `\"get\"` and `\"post\"`, and uses JSON Schema's `oneOf` feature for multiple kinds of `body` models, one for each request\/response.\r\n\r\nUseful links for AsyncAPI and WebSockets\/Socket.IO:\r\n- https:\/\/www.asyncapi.com\/blog\/websocket-part1\r\n- https:\/\/www.asyncapi.com\/blog\/websocket-part2\r\n- https:\/\/www.asyncapi.com\/blog\/socketio-part1\r\n- https:\/\/www.asyncapi.com\/blog\/socketio-part2\r\n\r\n\r\n## Socket.IO Connection Tips\r\n\r\nWhen configuring a Socket.IO connection for use with Floatplane, there are some particular configurations to perform in order to prevent issues.\r\n\r\n- Path: `\/socket.io`\r\n\t- Floatplane's preferred Socket.IO path is `\/socket.io`.\r\n\t- By default, some client libraries will use a path of `\/engine.io` and may result in an HTTP 404 if used.\r\n- Secure: `true`\r\n\t- Floatplane is HTTPS\/WSS only, and has HTTP\/WS disabled.\r\n\t- Some client libraries have TLS disabled by default.\r\n- Transports: `websocket` \/ Secure: `true`\r\n\t- Floatplane appears to have HTTP long-polling disabled with their Engine.IO configuration, and thus the only option available is to use WebSockets.\r\n\t- When connecting to Floatplane's sockets, client libraries typically try to default to HTTP and only upgrade to WebSockets afterward. This may not work correctly with Floatplane, so attempt to connect via WebSockets by default.\r\n- Query \/ ConnectParams\r\n\t- Set the query or connection parameters like so:\r\n\t\t- `__sails_io_sdk_version`: `0.13.8`\r\n\t\t- `__sails_io_sdk_platform`: {your platform}\r\n\t\t- `__sails_io_sdk_language`: {your language}\r\n\t- These are required for Sails to initialize properly. Floatplane's Sails version defaults to the version to `0.9.0` which will throw an error when performing an Sails-related events, because it thinks your code will be too old to handle it.\r\n- Headers:\r\n\t- `Origin: https:\/\/www.floatplane.com\"`\r\n\t\t- For security-related purposes, Floatplane will deny WebSocket connections from what it thinks are other websites. This is to prevent cross-site request forgery. \r\n\t\t- When implementing an application in a browser, this is not customizable. But from a regular application, this is needed in order for Floatplane to trust your connection.\r\n\t- Cookies:\r\n\t\t- Some client libraries in Socket.IO have a separate configuration for Cookies, while others require you to bundle it in the `extraHeaders` configuration.\r\n\t\t- `sails.sid`\r\n\t\t\t- The `sails.sid` cookie is not required to make a raw Socket.IO connection with Floatplane, but will be required for making most Sails get\/post requests.\r\n\t\t\t- Otherwise, the socket connection is largely useless.",
		"license": {
			"name": "MIT",
			"url": "https://github.com/Jman012/FloatplaneAPI/blob/main/LICENSE"
		},
		"contact": {
			"name": "James Linnell",
			"url": "https://github.com/Jman012/FloatplaneAPI/"
		}
	},
	"servers": {
		"website": {
			"url": "www.floatplane.com/socket.io/?__sails_io_sdk_version={sailsVersion}&__sails_io_sdk_platform={sailsPlatform}&__sails_io_sdk_language={sailsVersion}&EIO=3&transport=websocket",
			"protocol": "wss",
			"description": "A client connects to Floatplane's asynchronous API via WebSockets with TLS (wss). The socket it connects to is goeverned by Sails, which requires specifying which version of Sails to use, as well as other parameters like the platform and language. The purpose of the `EIO` query parameter is unknown. If using a proper Sails client library, the parameters should be auto-filled for you, and simply connecting to `www.floatplane.com/socket.io/` should suffice.",
			"variables": {
				"sailsVersion": {
					"default": "0.13.8",
					"description": "The value `0.13.8` is the current value at the time of writing (2022-05-08). This gets updated every so often with updates to the Floatplane frontend. There may be compatibility issues if too old of a value is supplied (the Sails backend may reject the connection). It is important to keep this value as up-to-date as possible, in order to prevent rejected connection issues.",
					"examples": [
						"0.13.8"
					]
				},
				"sailsPlatform": {
					"default": "browser",
					"description": "The value `browser` is the current value used by the Sails JS client library. It is not known what effect values other than those defined by Sails may have on the socket connection.",
					"examples": [
						"browser",
						"node"
					]
				},
				"sailsLanguage": {
					"default": "javascript",
					"description": "The value `javascript` is the current value used by the Sails JS client library. It is not known what effect values other than `javascript` may have on the socket connection.",
					"examples": [
						"javascript"
					]
				}
			}
		}
	},
	"channels": {
		"/": {
			"description": "Socket.IO and Sails groups messages and events into different namespaces, with `/` being the default namespace. Multiple kinds of messages can be sent in a single namespace, with Socket.IO having its own mechanisms to differentiate message types. Floatplane only uses the root Socket.IO namespace (`/`).",
			"publish": {
				"message": {
					"oneOf": [
						{
							"$ref": "#/components/messages/SailsPost"
						}
					]
				}
			},
			"subscribe": {
				"message": {
					"oneOf": [
						{
							"$ref": "#/components/messages/SyncEvent"
						},
						{
							"$ref": "#/components/messages/PollOpen"
						},
						{
							"$ref": "#/components/messages/PollClose"
						},
						{
							"$ref": "#/components/messages/PollUpdateTally"
						}
					]
				}
			},
			"bindings": {
				"ws": {
					"method": "GET",
					"headers": {
						"description": "The `sails.sid` cookie must be sent upon connecting to the socket for authentication with the server. This is the authentication cookie from the Floatplane website used to identify the user.",
						"type": "object",
						"properties": {
							"Cookies": {
								"type": "string",
								"description": "Should contain a value for `sails.sid`."
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"messages": {
			"SailsPost": {
				"name": "post",
				"title": "Sails HTTP POST",
				"summary": "HTTP POST via Sails socket connection",
				"description": "This one asynchronous Sails/Socket.IO event may contain different Floatplane events in the payload, and contain different Floatplane events in the response/acknowledgement (depending on the request).",
				"contentType": "application/json",
				"payload": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/SailsConnect"
						},
						{
							"$ref": "#/components/schemas/JoinLiveRoom"
						},
						{
							"$ref": "#/components/schemas/LeaveLiveRoom"
						}
					]
				},
				"examples": [
					{
						"name": "SailsConnect",
						"summary": "Connecting to Floatplane sync events via a Sails HTTP POST.",
						"payload": {
							"method": "post",
							"headers": {},
							"data": {},
							"url": "/api/v3/socket/connect"
						}
					},
					{
						"name": "JoinLiveRoom",
						"summary": "Connect to a live poll room via a Sails HTTP POST.",
						"payload": {
							"method": "post",
							"headers": {},
							"data": {
								"creatorId": "59f94c0bdd241b70349eb72b"
							},
							"url": "/api/v3/poll/live/joinroom"
						}
					},
					{
						"name": "LeaveLiveRoom",
						"summary": "Disconnect from a live poll room via a Sails HTTP POST.",
						"payload": {
							"method": "post",
							"headers": {},
							"data": {
								"creatorId": "59f94c0bdd241b70349eb72b"
							},
							"url": "/api/v3/poll/live/leaveroom"
						}
					}
				],
				"x-ack": {
					"args": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/SailsConnected"
							},
							{
								"$ref": "#/components/schemas/JoinedLiveRoom"
							},
							{
								"$ref": "#/components/schemas/LeftLiveRoom"
							}
						]
					},
					"examples": [
						{
							"name": "SailsConnected",
							"summary": "Successful response from a `SailsConnect` message.",
							"payload": {
								"body": {
									"message": "User sync setup."
								},
								"headers": {},
								"statusCode": 200
							}
						},
						{
							"name": "JoinedLiveRoom",
							"summary": "Successful response from a `JoinLiveRoom` message.",
							"payload": {
								"body": {
									"activePolls": []
								},
								"headers": {},
								"statusCode": 200
							}
						},
						{
							"name": "LeftLiveRoom",
							"summary": "Successful response from a `LeaveLiveRoom` message.",
							"payload": {
								"body": true,
								"headers": {},
								"statusCode": 200
							}
						}
					]
				}
			},
			"SyncEvent": {
				"name": "syncEvent",
				"title": "Floatplane Sync Event",
				"summary": "A sync event arrives from the Floatplane server after registrating with the connect event (`/api/v3/socket/connect`).",
				"description": "The sync event is another wrapper over Socket.IO, where the actual event type is embedded within the Socket.IO event payload. Most kinds of sync events are notifications of new blog posts on Floatplane from a subscribed creator.",
				"contentType": "application/json",
				"payload": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/CreatorNotification"
						},
						{
							"$ref": "#/components/schemas/PostRelease"
						},
						{
							"$ref": "#/components/schemas/CreatorMenuUpdate"
						}
					]
				},
				"examples": [
					{
						"name": "CreatorNotification Sync Event: Content Post Release",
						"summary": "Floatplane sent a sync event for a content post release via the `creatorNotification` event.",
						"payload": {
							"event": "creatorNotification",
							"data": {
								"id": "CONTENT_POST_RELEASE:yQDi4v3EMc",
								"eventType": "CONTENT_POST_RELEASE",
								"title": "New post from LinusTechTips",
								"message": "Reacting to OLD Computer Magazines!",
								"creator": "59f94c0bdd241b70349eb72b",
								"content": "yQDi4v3EMc",
								"icon": "https://pbs.floatplane.com/creator_icons/59f94c0bdd241b70349eb72b/770551996990709_1551249357205.jpeg",
								"thumbnail": "https://pbs.floatplane.com/blogPost_thumbnails/yQDi4v3EMc/682332670704114_1651513307946.jpeg",
								"target": {
									"url": "/post/yQDi4v3EMc",
									"matchScheme": "contains",
									"match": "yQDi4v3EMc",
									"foregroundDiscardOnMatch": true,
									"matchPortion": "path"
								},
								"foregroundVisible": "yes",
								"video": {
									"creator": "59f94c0bdd241b70349eb72b",
									"guid": "yQDi4v3EMc"
								},
								"post": {
									"creator": "59f94c0bdd241b70349eb72b",
									"guid": "yQDi4v3EMc",
									"id": "yQDi4v3EMc",
									"text": "<p>Join us on a trip down memory lane where Linus looks at some of the greatest and latest PC tech circa 2004. These old issues of Maximum PC are filled with tons of hilarious takes, forgotten products, and beloved childhood favourites!</p>",
									"title": "Reacting to OLD Computer Magazines!"
								}
							}
						}
					},
					{
						"name": "CreatorNotification Sync Event: Content Livestream Start",
						"summary": "Floatplane sent a sync event for a content livestream start via the `creatorNotification` event.",
						"payload": {
							"event": "creatorNotification",
							"data": {
								"id": "CONTENT_LIVESTREAM_START:91ecb0f8-541b-4c5b-b35f-05552df7f805",
								"eventType": "CONTENT_LIVESTREAM_START",
								"title": "LinusTechTips started a livestream",
								"message": "We're Finally Free - WAN Show May 13, 2022",
								"creator": "59f94c0bdd241b70349eb72b",
								"icon": "https://pbs.floatplane.com/creator_icons/59f94c0bdd241b70349eb72b/770551996990709_1551249357205.jpeg",
								"thumbnail": "https://pbs.floatplane.com/stream_thumbnails/5c13f3c006f1be15e08e05c0/481046370800602_1651880382456.jpeg",
								"target": {
									"url": "/channel/linustechtips/live/",
									"matchScheme": "contains",
									"match": "linustechtips",
									"foregroundDiscardOnMatch": true,
									"matchPortion": "path"
								},
								"foregroundVisible": "yes"
							}
						}
					},
					{
						"name": "PostRelease Sync Event: Content Post Release",
						"summary": "Floatplane sent a sync event for a content post release via the `postRelease` event.",
						"payload": {
							"event": "postRelease",
							"data": {
								"id": "CONTENT_POST_RELEASE:yQDi4v3EMc",
								"eventType": "CONTENT_POST_RELEASE",
								"title": "New post from LinusTechTips",
								"message": "Reacting to OLD Computer Magazines!",
								"creator": "59f94c0bdd241b70349eb72b",
								"content": "yQDi4v3EMc",
								"icon": "https://pbs.floatplane.com/creator_icons/59f94c0bdd241b70349eb72b/770551996990709_1551249357205.jpeg",
								"thumbnail": "https://pbs.floatplane.com/blogPost_thumbnails/yQDi4v3EMc/682332670704114_1651513307946.jpeg",
								"target": {
									"url": "/post/yQDi4v3EMc",
									"matchScheme": "contains",
									"match": "yQDi4v3EMc",
									"foregroundDiscardOnMatch": true,
									"matchPortion": "path"
								},
								"foregroundVisible": "yes",
								"video": {
									"creator": "59f94c0bdd241b70349eb72b",
									"guid": "yQDi4v3EMc"
								},
								"post": {
									"creator": "59f94c0bdd241b70349eb72b",
									"guid": "yQDi4v3EMc",
									"id": "yQDi4v3EMc",
									"text": "<p>Join us on a trip down memory lane where Linus looks at some of the greatest and latest PC tech circa 2004. These old issues of Maximum PC are filled with tons of hilarious takes, forgotten products, and beloved childhood favourites!</p>",
									"title": "Reacting to OLD Computer Magazines!"
								}
							}
						}
					},
					{
						"name": "CreatorMenuUpdate Sync Event",
						"summary": "Floatplane sent a sync event for a creator menu update.",
						"payload": {
							"event": "creatorMenuUpdate",
							"data": {
								"id": "yQDi4v3EMc",
								"guid": "yQDi4v3EMc",
								"title": "Reacting to OLD Computer Magazines!",
								"text": "<p>Join us on a trip down memory lane where Linus looks at some of the greatest and latest PC tech circa 2004. These old issues of Maximum PC are filled with tons of hilarious takes, forgotten products, and beloved childhood favourites!</p>",
								"type": "blogPost",
								"tags": [],
								"attachmentOrder": [
									"lb7QsgcEtc"
								],
								"metadata": {
									"hasVideo": true,
									"videoCount": 1,
									"videoDuration": 1096,
									"hasAudio": false,
									"audioCount": 0,
									"audioDuration": 0,
									"hasPicture": false,
									"pictureCount": 0,
									"hasGallery": false,
									"galleryCount": 0,
									"isFeatured": false
								},
								"releaseDate": "2022-05-02T19:44:00.043Z",
								"likes": 0,
								"dislikes": 0,
								"score": 0,
								"comments": 0,
								"creator": "59f94c0bdd241b70349eb72b",
								"wasReleasedSilently": false,
								"thumbnail": {
									"width": 1920,
									"height": 1080,
									"path": "https://pbs.floatplane.com/blogPost_thumbnails/yQDi4v3EMc/682332670704114_1651513307946.jpeg",
									"childImages": [
										{
											"width": 400,
											"height": 225,
											"path": "https://pbs.floatplane.com/blogPost_thumbnails/yQDi4v3EMc/682332670704114_1651513307946_400x225.jpeg"
										},
										{
											"width": 1200,
											"height": 675,
											"path": "https://pbs.floatplane.com/blogPost_thumbnails/yQDi4v3EMc/682332670704114_1651513307946_1200x675.jpeg"
										}
									]
								}
							}
						}
					}
				]
			},
			"PollOpen": {
				"name": "pollOpen",
				"title": "Poll Opened",
				"summary": "A `pollOpen` event arrives when a creator has started a new poll for users to vote on.",
				"description": "This provides options for the user to choose from, when the poll opened, and when it will automatically close. If the `endDate` is reached, the UI should show the conclusion and hide the poll as there will be no corresponding PollClose event. The `startDate` and `endDate` can be used to show a timer in the UI. In most polls, only a single option is permitted to be voted on, and the user is only allowed one chance at a vote.\n\nIn order to vote on a poll, perform an HTTP POST to `/api/v3/poll/vote`. Look at the OpenAPI specification document for more information.",
				"contentType": "application/json",
				"payload": {
					"$ref": "#/components/schemas/PollOpenClose"
				},
				"examples": [
					{
						"name": "PollOpen Example",
						"summary": "Opening a new poll with three options, with 60 seconds to answer.",
						"payload": {
							"poll": {
								"id": "62c8c1dd968bc0899bbb4b92",
								"type": "simple",
								"creator": "59f94c0bdd241b70349eb72b",
								"title": "When will WAN go live?",
								"options": [
									"5:00",
									"5:30",
									"It's already live 👽"
								],
								"startDate": "2022-07-08T23:46:37.429Z",
								"endDate": "2022-07-08T23:47:37.428Z",
								"finalTallyApproximate": null,
								"finalTallyReal": null,
								"runningTally": {
									"tick": 0,
									"counts": [
										0,
										0,
										0
									]
								}
							}
						}
					}
				]
			},
			"PollClose": {
				"name": "pollClose",
				"title": "Poll Closed",
				"summary": "A `pollClose` event arrives when a creator has ended a poll earlier than the expected `endDate`. Sometimes this happens right before starting a new poll, as it appears only one poll can be active at a time, per-creator. This payload will include the same details as the PollOpen event, but with an actual `endDate` as well as the final results of the tally.",
				"description": "",
				"contentType": "application/json",
				"payload": {
					"$ref": "#/components/schemas/PollOpenClose"
				},
				"examples": [
					{
						"name": "PollClose Example",
						"summary": "Closing a two-option poll early with a final count of 38 to 48. It ended about 17 seconds into the poll.",
						"payload": {
							"poll": {
								"id": "62c8e33a9f58a79f5269bbd7",
								"type": "simple",
								"creator": "59f94c0bdd241b70349eb72b",
								"title": "Should they do a poll? ",
								"options": [
									"Yes",
									"Different Yes"
								],
								"startDate": "2022-07-09T02:08:58.784Z",
								"endDate": "2022-07-09T02:09:15.514Z",
								"finalTallyApproximate": null,
								"finalTallyReal": null,
								"runningTally": {
									"tick": 86,
									"counts": [
										38,
										48
									]
								}
							}
						}
					}
				]
			},
			"PollUpdateTally": {
				"name": "pollUpdateTally",
				"title": "Poll Tally Updated",
				"summary": "A `pollUpdateTally` even will arrive upon every vote on the poll by a user.",
				"description": "The `tick` value will increment by one for each event, and one of the option counters should increment by one due to each vote. ",
				"contentType": "application/json",
				"payload": {
					"$ref": "#/components/schemas/PollUpdateTally"
				},
				"examples": [
					{
						"name": "PollUpdateTally Example",
						"summary": "The first vote performed on a poll, voting for the third option.",
						"payload": {
							"tick": 1,
							"counts": [
								0,
								0,
								1
							],
							"pollId": "62c8c1dd968bc0899bbb4b92"
						}
					}
				]
			}
		},
		"schemas": {
			"SailsHeaders": {
				"type": "object",
				"description": "Headers by Sails are not being used by Floatplane. Not much is known of this structure at this time.",
				"additionalProperties": true
			},
			"SailsStatusCode": {
				"type": "integer",
				"description": "These are the same as HTTP response status codes.",
				"minimum": 200,
				"maximum": 599
			},
			"SailsConnect": {
				"type": "object",
				"description": "Connect to Floatplane (after a socket connection has been made) in order to receive sync events, such as new post notifications.",
				"properties": {
					"method": {
						"const": "post",
						"description": "This endpoint expects a POST."
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"data": {
						"type": "object",
						"description": "No payload necessary.",
						"additionalProperties": false
					},
					"url": {
						"const": "/api/v3/socket/connect",
						"description": "The required endpoint for this event."
					}
				},
				"additionalProperties": false
			},
			"SailsConnected": {
				"type": "object",
				"description": "The response received from connecting to Floatplane for sync events. Once this is successfully received, sync events may appear on the socket asynchronously.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"message": {
								"type": "string"
							}
						}
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				}
			},
			"JoinLiveRoom": {
				"type": "object",
				"description": "Connect to a creator's live poll room (after a socket connection has been made) in order to receive poll events, such as new polls, poll tally updates, and closed polls. While not on the chat socket, this should typically be connected to while watching a livestream, and disconnected when leaving a livestream.",
				"properties": {
					"method": {
						"const": "post",
						"description": "This endpoint expects a POST."
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"data": {
						"type": "object",
						"properties": {
							"creatorId": {
								"type": "string",
								"description": "The id of the creator for which to join the live poll room."
							}
						}
					},
					"url": {
						"const": "/api/v3/poll/live/joinroom",
						"description": "The required endpoint for this event."
					}
				},
				"additionalProperties": false
			},
			"JoinedLiveRoom": {
				"type": "object",
				"description": "",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"activePolls": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/PollOpenClose"
								}
							}
						}
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				}
			},
			"LeaveLiveRoom": {
				"type": "object",
				"description": "Leave a live poll room and no longer receive poll events from the creator on this socket connection.",
				"properties": {
					"method": {
						"const": "post",
						"description": "This endpoint expects a POST."
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"data": {
						"type": "object",
						"properties": {
							"creatorId": {
								"type": "string",
								"description": "The id of the creator from which to leave the live poll room."
							}
						}
					},
					"url": {
						"const": "/api/v3/poll/live/leaveroom",
						"description": "The required endpoint for this event."
					}
				},
				"additionalProperties": false
			},
			"LeftLiveRoom": {
				"type": "object",
				"description": "Indicates that leaving the live poll room was successful.",
				"properties": {
					"body": {
						"type": "boolean"
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				}
			},
			"CreatorNotification": {
				"type": "object",
				"description": "This event is sent usually for new post notifications, where `eventType` is `CONTENT_POST_RELEASE`, along with information on which creator released a new post, and information on the post itself.",
				"properties": {
					"event": {
						"const": "creatorNotification"
					},
					"data": {
						"$ref": "#/components/schemas/NotificationData"
					}
				}
			},
			"PostRelease": {
				"type": "object",
				"description": "This event is sent usually for new post notifications, where `eventType` is `CONTENT_POST_RELEASE`, along with information on which creator released a new post, and information on the post itself. This sync event type seems to be deprecated, as the Floatplane website uses the above `creatorNotification` instead of this `postRelease`. For `CONTENT_POST_RELEASE`, these two have the same schema.",
				"properties": {
					"event": {
						"const": "postRelease"
					},
					"data": {
						"$ref": "#/components/schemas/NotificationData"
					}
				}
			},
			"NotificationData": {
				"type": "object",
				"description": "Contains data necessary to both show the notifiction in a user interface as well as technical details on what is being notified. Currently, this is used for notifying about new posts being released and the beginning of livestreams. Not all fields are present for all kinds of event types (for instance, livestream notifications do not have `video` or `content` objects, among others.",
				"properties": {
					"id": {
						"type": "string",
						"description": "Usually of the format `{eventType}:{content}`."
					},
					"eventType": {
						"type": "string",
						"enum": [
							"CONTENT_POST_RELEASE",
							"CONTENT_LIVESTREAM_START"
						],
						"description": "The `CONTENT_POST_RELEASE` enumeration indicates a new post has been released. The `CONTENT_LIVESTREAM_START` enumeration indicates that a livestream has been started by the creator. Other enumerations are unknown at this time."
					},
					"title": {
						"type": "string",
						"description": "Notification title."
					},
					"message": {
						"type": "string",
						"description": "Notification message/body."
					},
					"creator": {
						"type": "string",
						"description": "The identifier of the creator the notification is from."
					},
					"content": {
						"type": "string",
						"description": "Usually the id of the blog post, when `eventType` is `CONTENT_POST_RELEASE`."
					},
					"icon": {
						"type": "string",
						"format": "uri"
					},
					"thumbnail": {
						"type": "string",
						"format": "uri"
					},
					"target": {
						"type": "object",
						"description": "If the `target.matchPortion` of the browser's current href matches the `target.match` variable via the `target.matchScheme`, and if `target.foregroundDiscardOnMatch`, then do not show this notification because the user has already seen it.",
						"properties": {
							"url": {
								"type": "string",
								"description": "Unused in Floatplane code."
							},
							"matchScheme": {
								"type": "string",
								"description": "This is usually `contains`.",
								"enum": [
									"contains",
									"startsWith",
									"endsWith",
									"equals"
								]
							},
							"match": {
								"type": "string"
							},
							"foregroundDiscardOnMatch": {
								"type": "boolean"
							},
							"matchPortion": {
								"type": "string",
								"description": "This is usually `path` instead of `url`.",
								"default": "path",
								"enum": [
									"path",
									"url"
								]
							}
						},
						"required": [
							"url",
							"matchScheme",
							"match",
							"foregroundDiscardOnMatch",
							"matchPortion"
						]
					},
					"foregroundVisible": {
						"type": "string",
						"enum": [
							"yes",
							"no"
						]
					},
					"video": {
						"type": "object",
						"properties": {
							"creator": {
								"type": "string"
							},
							"guid": {
								"type": "string"
							}
						},
						"required": [
							"creator",
							"guid"
						]
					},
					"post": {
						"type": "object",
						"properties": {
							"creator": {
								"type": "string"
							},
							"guid": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"text": {
								"type": "string"
							},
							"title": {
								"type": "string"
							}
						}
					}
				},
				"required": [
					"id",
					"eventType",
					"creator"
				]
			},
			"CreatorMenuUpdate": {
				"type": "object",
				"description": "Does not appear to be used in Floatplane code. This model is similar to ContentPostV3Response in the REST API, but without attachment details. Its purpose is to help dynamically insert a single post into the list of posts on the screen, instead of making the client re-pull the 20 latest posts.",
				"properties": {
					"event": {
						"const": "creatorMenuUpdate"
					},
					"data": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"guid": {
								"type": "string"
							},
							"title": {
								"type": "string"
							},
							"text": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"tags": {
								"type": "array",
								"items": {}
							},
							"attachmentOrder": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"metadata": {
								"type": "object",
								"properties": {
									"hasVideo": {
										"type": "boolean"
									},
									"videoCount": {
										"type": "integer"
									},
									"videoDuration": {
										"type": "integer"
									},
									"hasAudio": {
										"type": "boolean"
									},
									"audioCount": {
										"type": "integer"
									},
									"audioDuration": {
										"type": "integer"
									},
									"hasPicture": {
										"type": "boolean"
									},
									"pictureCount": {
										"type": "integer"
									},
									"hasGallery": {
										"type": "boolean"
									},
									"galleryCount": {
										"type": "integer"
									},
									"isFeatured": {
										"type": "boolean"
									}
								}
							},
							"releaseDate": {
								"type": "string",
								"format": "date-time"
							},
							"likes": {
								"type": "integer"
							},
							"dislikes": {
								"type": "integer"
							},
							"score": {
								"type": "integer"
							},
							"comments": {
								"type": "integer"
							},
							"creator": {
								"type": "string"
							},
							"wasReleasedSilently": {
								"type": "boolean"
							},
							"thumbnail": {
								"$ref": "#/components/schemas/ImageModel"
							}
						}
					}
				}
			},
			"PollOpenClose": {
				"type": "object",
				"description": "This schema is used for both PollOpen and PollClose.",
				"properties": {
					"poll": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"description": "A unique identifier for the poll that is being opened or closed. Subsequent pollUpdateTally events will correspond to this id."
							},
							"type": {
								"type": "string",
								"description": "The type of poll that is being shown. So far, only `simple` is known as a type here."
							},
							"creator": {
								"type": "string",
								"description": "The id of the creator that is opening the poll. Useful if multiple livestreams are happening at the same time, so the UI knows which poll to show."
							},
							"title": {
								"type": "string",
								"description": "The main question of the poll being presented to the user."
							},
							"options": {
								"type": "array",
								"description": "The options that the user can select in the poll.",
								"items": {
									"type": "string"
								}
							},
							"startDate": {
								"type": "string",
								"format": "date-time",
								"description": "When the poll was first opened."
							},
							"endDate": {
								"type": "string",
								"format": "date-time",
								"description": "For PollOpen events, this is the time in which the poll should automatically close. This is usually 60 seconds after `startDate`. For PollClose events which close a poll early, this is the time in which it was closed by the creator, and is usually before the `endDate` from the corresponding PollOpen event."
							},
							"finalTallyApproximate": {
								"type": "null",
								"description": "Unknown so far."
							},
							"finalTallyReal": {
								"type": "null",
								"description": "Unknown so far."
							},
							"runningTally": {
								"type": "object",
								"properties": {
									"tick": {
										"type": "integer",
										"description": "A consecutively incrementing integer specifying the timeline of poll updates. Use the latest event by `tick` to show latest results. For PollOpen, this is always 0. For PollClose, this is the same tick as the latest PollUpdateTally event."
									},
									"counts": {
										"type": "array",
										"description": "A list of poll vote counts for each poll option. The order of these matches the order of `options` in the initial PollOpen event. For PollOpen, these are always 0. For PollClose, these reflect the same values as the latest PollUpdateTally event.",
										"items": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				}
			},
			"PollUpdateTally": {
				"type": "object",
				"properties": {
					"tick": {
						"type": "integer",
						"description": "A consecutively incrementing integer specifying the timeline of poll updates. Use the latest event by `tick` to show latest results."
					},
					"counts": {
						"type": "array",
						"description": "A list of poll vote counts for each poll option. The order of these matches the order of `options` in the initial PollOpen event.",
						"items": {
							"type": "integer"
						}
					},
					"pollId": {
						"type": "string",
						"description": "Which poll this update corresponds to."
					}
				}
			},
			"ImageModel": {
				"type": "object",
				"properties": {
					"width": {
						"type": "integer"
					},
					"height": {
						"type": "integer"
					},
					"path": {
						"type": "string",
						"format": "uri"
					},
					"size": {
						"type": "integer"
					},
					"childImages": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ChildImageModel"
						}
					}
				},
				"required": [
					"width",
					"height",
					"path"
				]
			},
			"ChildImageModel": {
				"type": "object",
				"properties": {
					"width": {
						"type": "integer"
					},
					"height": {
						"type": "integer"
					},
					"path": {
						"type": "string",
						"format": "uri"
					}
				},
				"required": [
					"width",
					"height",
					"path"
				]
			}
		}
	}
}
