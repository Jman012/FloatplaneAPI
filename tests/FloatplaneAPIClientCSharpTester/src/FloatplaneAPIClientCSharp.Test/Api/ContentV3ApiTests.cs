/*
 * Floatplane REST API
 *
 * The version of the OpenAPI document: 3.9.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;
using Xunit.Extensions;

using FloatplaneAPIClientCSharp.Client;
using FloatplaneAPIClientCSharp.Api;
using FloatplaneAPIClientCSharp.Model;

namespace FloatplaneAPIClientCSharp.Test.Api
{
	/// <summary>
	///  Class for testing ContentV3Api
	/// </summary>
	/// <remarks>
	/// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
	/// Please update the test case below to test the API endpoint.
	/// </remarks>
	public class ContentV3ApiTests : IDisposable
	{
		private ContentV3Api instance;

		public ContentV3ApiTests()
		{
			instance = new ContentV3Api();
			ApiTestHelper.SetStrictSerializerSettings(instance, instance.Client);
		}

		public void Dispose()
		{
			// Cleanup when everything is done.
		}

		/// <summary>
		/// Test an instance of ContentV3Api
		/// </summary>
		[Fact]
		public void InstanceTest()
		{
			// TODO uncomment below to test 'IsType' ContentV3Api
			//Assert.IsType<ContentV3Api>(instance);
		}

		/// <summary>
		/// Test DislikeContent
		/// </summary>
		[Fact]
		public void DislikeContentTest()
		{
			// TODO uncomment below to test the method and replace null with proper value
			//ContentLikeV3Request contentLikeV3Request = null;
			//var response = instance.DislikeContent(contentLikeV3Request);
			//Assert.IsType<List<string>>(response);
		}

		/// <summary>
		/// Test GetBlogPost
		/// </summary>
		[Fact]
		public void GetBlogPostTest()
		{
			IReadOnlyList<string> ids = ApiTestSampleData.AllPosts;
			foreach (var id in ids)
			{
				var response = instance.GetBlogPostWithHttpInfo(id);
				Assert.Null(response.ErrorText);
				Assert.IsType<ContentPostV3Response>(response.Data);
				Assert.Equal(response.Data?.Id, id);
			}
		}

		[Fact]
		public void GetBlogPostNotExistentTest()
		{
			string id = ApiTestSampleData.NonExistentIdentifer;
			var apiException = Assert.Throws<ApiException>(() => {
				var response = instance.GetBlogPostWithHttpInfo(id);
			});
			Assert.NotNull(apiException.ErrorContent);
			Assert.Equal(apiException.ErrorCode, (int)System.Net.HttpStatusCode.Forbidden);

			ApiTestHelper.ValidateErrorModel(ApiTestHelper.GetErrorModel(apiException));
		}

		/// <summary>
		/// Test GetContentTags
		/// </summary>
		[Fact]
		public void GetContentTagsTest()
		{
			List<string> creatorIds = new List<string>()
			{
				ApiTestSampleData.LttCreatorId,
			};
			var response = instance.GetContentTagsWithHttpInfo(creatorIds);
			Assert.Null(response.ErrorText);
			Assert.IsType<Dictionary<string, int>>(response.Data);
			Assert.True(response.Data?.Any());
		}

		/// <summary>
		/// Test GetCreatorBlogPosts
		/// </summary>
		[Fact]
		public void GetCreatorBlogPostsTest()
		{
			string id = ApiTestSampleData.LttCreatorId;
			int? limit = null;
			int? fetchAfter = null;
			string? search = null;
			List<string>? tags = null;
			bool? hasVideo = null;
			bool? hasAudio = null;
			bool? hasPicture = null;
			bool? hasText = null;
			string? sort = null;
			int? fromDuration = null;
			int? toDuration = null;
			DateTimeOffset? fromDate = null;
			DateTimeOffset? toDate = null;
			var response = instance.GetCreatorBlogPostsWithHttpInfo(id, limit, fetchAfter, search, tags, hasVideo, hasAudio, hasPicture, hasText, sort, fromDuration, toDuration, fromDate, toDate);
			Assert.Null(response.ErrorText);
			Assert.IsType<List<BlogPostModelV3>>(response.Data);
			Assert.True(response.Data?.Any());
		}

		/// <summary>
		/// Test GetMultiCreatorBlogPosts
		/// </summary>
		[Fact]
		public void GetMultiCreatorBlogPostsTest()
		{
			List<string> ids = new List<string>()
			{
				ApiTestSampleData.LttCreatorId,
			};
			int limit = 20;
			List<ContentCreatorListLastItems>? fetchAfter = null;
			var response = instance.GetMultiCreatorBlogPostsWithHttpInfo(ids, limit, fetchAfter);
			Assert.Null(response.ErrorText);
			Assert.IsType<ContentCreatorListV3Response>(response.Data);
			Assert.True(response.Data?.BlogPosts.Any());
		}

		/// <summary>
		/// Test GetPictureContent
		/// </summary>
		[Fact]
		public void GetPictureContentTest()
		{
			string id = ApiTestSampleData.Picture_New;
			var response = instance.GetPictureContentWithHttpInfo(id);
			Assert.Null(response.ErrorText);
			Assert.IsType<ContentPictureV3Response>(response.Data);
			Assert.Equal(response.Data?.Id, id);

			id = ApiTestSampleData.Picture_Old;
			response = instance.GetPictureContentWithHttpInfo(id);
			Assert.Null(response.ErrorText);
			Assert.IsType<ContentPictureV3Response>(response.Data);
			Assert.Equal(response.Data?.Id, id);
		}

		/// <summary>
		/// Test GetRelatedBlogPosts
		/// </summary>
		[Fact]
		public void GetRelatedBlogPostsTest()
		{
			string id = ApiTestSampleData.Post_Video_New;
			var response = instance.GetRelatedBlogPostsWithHttpInfo(id);
			Assert.Null(response.ErrorText);
			Assert.IsType<List<BlogPostModelV3Base>>(response.Data);
			Assert.True(response.Data?.Any());
		}

		/// <summary>
		/// Test GetVideoContent
		/// </summary>
		[Fact]
		public void GetVideoContentTest()
		{
			string id = ApiTestSampleData.Video_New;
			var response = instance.GetVideoContentWithHttpInfo(id);
			Assert.Null(response.ErrorText);
			Assert.IsType<ContentVideoV3Response>(response.Data);
			Assert.Equal(response.Data?.Id, id);

			id = ApiTestSampleData.Video_Old;
			response = instance.GetVideoContentWithHttpInfo(id);
			Assert.Null(response.ErrorText);
			Assert.IsType<ContentVideoV3Response>(response.Data);
			Assert.Equal(response.Data?.Id, id);
		}

		/// <summary>
		/// Test LikeContent
		/// </summary>
		[Fact]
		public void LikeContentTest()
		{
			// TODO uncomment below to test the method and replace null with proper value
			//ContentLikeV3Request contentLikeV3Request = null;
			//var response = instance.LikeContent(contentLikeV3Request);
			//Assert.IsType<List<string>>(response);
		}
	}
}
