{
	"asyncapi": "2.4.0",
	"info": {
		"title": "Floatplane Async Chat API",
		"version": "4.0.13",
		"description": "Homepage: [https:\/\/jman012.github.io\/FloatplaneAPIDocs](https:\/\/jman012.github.io\/FloatplaneAPIDocs)\r\n\r\nThis document describes the asynchronous\/event-driven API layer of [https:\/\/www.floatplane.com](https:\/\/www.floatplane.com), a content creation and video streaming website created by Floatplane Media Inc. and Linus Media Group, where users can support their favorite creates via paid subscriptions in order to watch their video and livestream content in higher quality and other perks.\r\n\r\nThis API is specific to the chat\/livestream activities of the Floatplane website, which is responsible for sending and receiving chat message, user lists, emote lists, etc., and is meant for a connection to chat.floatplane.com. If you are looking for the frontend  API layer of Floatplane (www.floatplane.com), please visit [this document](..\/AsyncAPIFrontend) instead.\r\n\r\n## Implementation Notes\r\n\r\nThis document is an AsyncAPI implementation on top of a Socket.IO connection. AsyncAPI does not have any specifics for Socket.IO, and so any automatic code-generation from this document may not work 100% out-of-the-box on a WebSocket connection. At best, it will provide all of the proper models needed for the different events and messages. But it may require some glue code to get it working properly with Sails. See the below section on the difference between Socket.IO, Sails, and Floatplane for this socket connection.\r\n\r\nIt is recommended for any client implementation to use a Socket.IO reference library implementation [in your language of choice](https:\/\/github.com\/orgs\/socketio\/repositories?q=socket.io-client&type=all&language=&sort=) with this document. A version of this document for Sails would be preferred, but there is only a single client reference implementation (JavaScript), and the Sails layer on top of Socket.IO is fairly straightforward.\r\n\r\n## Technology Notes\r\n\r\nFloatplane's backend primarily uses [Sails](https:\/\/sailsjs.com\/) and the website UI uses an Angular frontend along with Sails' socket connection for low-latency request\/response and event-driven architecture. Sails is an MVC framework for making Node.js websites and APIs. Sails' socket connection is built on three tiers of technology that should be understood when implementing this API:\r\n\r\n1. [Engine.IO](https:\/\/socket.io\/docs\/v4\/how-it-works\/#engineio) ([GitHub](https:\/\/github.com\/socketio\/engine.io))\r\n\t1. This layer is responsible for abstracting the socket connection for reliability. It primarily uses WebSockets as the communication channel, but will fall back to HTTP long-polling if WebSockets are not available.\r\n\t1. It provides a rather simple protocol on top of the below items, usually prefixing a WebSocket frame with a single byte indicating the packet type.\r\n\t1. Engine.IO does have its own connection mechanism, and it would be best to have this implemented by a library rather than by hand. While it has a reference [JavaScript\/Node.JS](https:\/\/github.com\/socketio\/engine.io-client) implementation and a [Java](https:\/\/github.com\/socketio\/engine.io-client-java) implementation, it is recommended to use a Socket.io library outlined below.\r\n\t1. On the wire, you'll see connection frames with the `0` prefix, pings\/pongs as a single byte (`2`\/`3`), or messages with the `4` prefix. If you are analyzing the WebSocket frames directly, it would be beneficial to familiarize yourself with the [Engine.IO protocol](https:\/\/github.com\/socketio\/engine.io-protocol).\r\n1. [Socket.IO](https:\/\/socket.io\/)\r\n\t1. This builds on Engine.IO by adding reconnection, packet buffering, acknowledgements (request\/response), broadcasting, and multiplexing (namespaces) features.\r\n\t1. Note that Floatplane is **using Socket.IO version v2**. Not the latest v4. This may affect which client Socket.IO library implementation you use, as not all latest-version client libraries support v2.\r\n\t1. It would be useful to learn how the [Socket.IO Protocol](https:\/\/github.com\/socketio\/socket.io-protocol) is structured. In short, events are prefixed with `2`, acknowledgements are prefixed with `3` (both are after the Engine.IO prefixes\/headers), and the data of the event is stored as a JSON-encoded array of items, where the first item is always a string identifying the event name, and optional subsequent items are the arguments to the event.\r\n1. [Sails Socket Client](https:\/\/sailsjs.com\/documentation\/reference\/web-sockets\/socket-client)\r\n\t1. The Sails socket client primarily adds HTTP request\/response emulation on top of Socket.IO. For instance, it adds HTTP verbs such as `GET`, `POST`, etc. onto the socket connection, and uses Socket.IO's acknowledgements in order to send back a response body.\r\n\t1. This is implemented by emitting Socket.IO events where the event name is the HTTP verb (e.g. `\"get\"`, `\"post\"`, etc.), and the first and only argument to the Socket.IO event is a data structure with Sails-specific fields: `method`, `headers`, `url`, and `data`. The `data` field is where the application-specific data is stored in the event.\r\n\t1. The Sails response is sent back to the client as a Socket.IO acknowledgement in a similar format with the `body`, `headers`, and `statusCode` fields as the first and only argument in the ack.\r\n\t1. There is a reference Sails client library for [JavaScript](https:\/\/github.com\/balderdashy\/sails.io.js), but there is no other official reference implementation.\r\n1. Floatplane\r\n\t1. The final layer is the application Floatplane itself, which is described in this document.\r\n\r\n### Over-the-Wire Examples\r\n\r\nThe following list shows some examples of what a raw WebSocket connection might entail, and splits up the data between the various layers. This section is mostly to help with debugging raw connections, and understanding the technical stack of Floatplane.\r\n\r\n1. C->S `GET wss:\/\/www.floatplane.com\/socket.io\/?__sails_io_sdk_version=0.13.8&__sails_io_sdk_platform=browser&__sails_io_sdk_language=javascript&EIO=3&transport=websocket`\r\n\t1. The client first connects directly to the WebSocket endpoint, and receives an `HTTP 101 Switching Protocols`.\r\n\t1. This is Engine.IO only.\r\n1. S->C `0{\"sid\":\"b1VcCLtZ1SUXiYEGAB49\",\"upgrades\":[],\"pingInterval\":25000,\"pingTimeout\":60000}`\r\n\t1. The WebSocket connection is established and the server sends the open packet.\r\n\t1. `0`: Engine.IO open header.\r\n\t1. `{\"sid\":\"b1VcCLtZ1SUXiYEGAB49\",\"upgrades\":[],\"pingInterval\":25000,\"pingTimeout\":60000}`: Engine.IO open payload.\r\n\t1. Note that if using a proper Engine.IO or Socket.IO implementation, you will not need to see or handle this in your code.\r\n\t1. This is Engine.IO only.\r\n1. S->C `40`\r\n\t1. The server automatically connects the client to the Socket.IO default namespace (`\/`).\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `0`: Socket.IO connect header.\r\n\t1. Note that the namespace `\/` is implied but not included in this message due to the Socket.IO protocol marking is as optional. The non-encoded message for this in Socket.IO would look like `{\"type\": 0,\"nsp\": \"\/admin\",\"data\": {}}`.\r\n\t1. Note that if using a proper Socket.IO library implementation, you will not need to see or handle this in your code.\r\n\t1. This is Engine.IO and Socket.IO only. \r\n1. C->S: `420[\"post\",{\"method\":\"post\",\"headers\":{},\"data\":{},\"url\":\"\/api\/v3\/socket\/connect\"}]`\r\n\t1. The client posts to the socket connect URL in Sails, in order for Floatplane to connect and listen for events.\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `20`: Socket.IO header.\r\n\t\t1. `2`: Marks that this message is an Event.\r\n\t\t1. `0`: Id parameter. Needed for the following acknowledgement.\r\n\t1. `[\"post\",{\"method\":\"post\",\"headers\":{},\"data\":{},\"url\":\"\/api\/v3\/socket\/connect\"}]`: Socket.IO event data.\r\n\t\t1. `\"post\"`: Socket.IO event name.\r\n\t\t\t1. This event name is reserved and used by Sails.\r\n\t\t1. `{\"method\":\"post\",\"headers\":{},\"data\":{},\"url\":\"\/api\/v3\/socket\/connect\"}`: Socket.IO event argument for the Sails `\"post\"` event.\r\n\t\t\t1. `\"method\":\"post,\"url\":\"\/api\/v3\/socket\/connect\"`: This Sails POST request is destined for the `\/api\/v3\/socket\/connect` endpoint.\r\n\t\t\t1. `\"data\":{}`: Sails request body.\r\n\t\t\t\t1. `{}`: No Floatplane data in the request.\r\n1. S->C: `430[{\"body\":{\"message\":\"User sync setup.\"},\"headers\":{},\"statusCode\":200}]`\r\n\t1. The Floatplane server responds to the POST request in Sails, telling the Floatplane client that it is connected.\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `30`: Socket.IO header.\r\n\t\t1. `3`: Marks that this message is an Acknowledgement\r\n\t\t1. `0`: Id parameter. Marks that it is acknowledging event number 0.\r\n\t1. `[{\"body\":{\"message\":\"User sync setup.\"},\"headers\":{},\"statusCode\":200}]`: Socket.IO acknowledgement data.\r\n\t\t1. `{\"body\":{\"message\":\"User sync setup.\"},\"headers\":{},\"statusCode\":200}`: The only argument in the Socket.IO ack\r\n\t\t\t1. `\"statusCode\":200`: Sails HTTP response status code.\r\n\t\t\t1. `\"body\":{\"message\":\"User sync setup.\"}`: Sails HTTP response body.\r\n\t\t\t\t1. `{\"message\":\"User sync setup.\"}`: Floatplane connection response.\r\n1. S->C: `421[\"syncEvent\",{\"event\": \"creatorNotification\",\"data\": {\"id\": \"CONTENT_POST_RELEASE:yQDi4v3EMc\",\"eventType\": \"CONTENT_POST_RELEASE\",...}}]`\r\n\t1. The Floatplane server sends an event to the client about a new post notification.\r\n\t1. `4`: Engine.IO message header.\r\n\t1. `2`: Socket.IO event header.\r\n\t1. `[\"syncEvent\",{\"event\": \"creatorNotification\",\"data\": {\"id\": \"CONTENT_POST_RELEASE:yQDi4v3EMc\",\"eventType\": \"CONTENT_POST_RELEASE\",...}}]`: Socket.IO event data.\r\n\t\t1. `\"syncEvent\"`: Socket.IO event name.\r\n\t\t\t1. This name is used by the Floatplane application. The server is using the Sails socket to emit the event, but does not add anything to the request. It is basically emitting directly on the socket from Socket.IO.\r\n\t\t1. `{\"event\": \"creatorNotification\",\"data\": {\"id\": \"CONTENT_POST_RELEASE:yQDi4v3EMc\",\"eventType\": \"CONTENT_POST_RELEASE\",...}}`: Socket.IO event argument for the `\"syncEvent\"` event.\r\n\t\t\t1. This is structured entirely by Floatplane.\r\n\r\n## Document Organization\r\n\r\nThis document is primarily organized around the AsyncAPI blog post on Socket.IO ([Part 1](https:\/\/www.asyncapi.com\/blog\/socketio-part1), and [Part 2](https:\/\/www.asyncapi.com\/blog\/socketio-part2)). The extension [`x-ack`](https:\/\/www.asyncapi.com\/blog\/socketio-part2#message-ack-object) is used in order to model Socket.IO's acknowledgement feature that emulates the request\/response paradigm. The Socket.IO acknowledgement does not have an event name that goes over the wire, and instead directly references the initiating event via its unique identifier. As such, acknowledgements are not specified in the AsyncAPI's channel's publisher or subscriber operators.\r\n\r\nThis document also manually incorporates features of Sails on top of Socket.IO. It does so manually because the Sails abstraction is rather light, by basically specifying event names and models for data to pass through for requests and responses to virtual endpoints. Sails introduces the event names `\"get\"`, `\"post\"`, `\"put\"`, and other HTTP verbs, where the event argument (request) is JSON in the form of:\r\n\r\n```json\r\n{\r\n\t\"method\": \"get\",\r\n\t\"headers\": {},\r\n\t\"body\": {\r\n\t\t...\r\n\t},\r\n\t\"url\": \"\/api\/v3\/...\"\r\n}\r\n```\r\n\r\nAnd the acknowledgement\/response argument is JSON in the form of:\r\n\r\n```json\r\n{\r\n\t\"body\": {\r\n\t\t...\r\n\t},\r\n\t\"headers\": {},\r\n\t\"statusCode: 200\r\n}\r\n```\r\n\r\nWhere `body` in each is specific to Floatplane. The rest of the data structure emulates HTTP requests and responses. As such, this AsyncAPI document explicitly models these structures around the Floatplane-specific requests and responses. \r\n\r\nFinally, because Sails uses generic `\"get\"`, `\"post\"`, etc. event names for multiple types of actualized events on Socket.IO, a single AsyncAPI Operator is defined for each of `\"get\"` and `\"post\"`, and uses JSON Schema's `oneOf` feature for multiple kinds of `body` models, one for each request\/response.\r\n\r\nUseful links for AsyncAPI and WebSockets\/Socket.IO:\r\n- https:\/\/www.asyncapi.com\/blog\/websocket-part1\r\n- https:\/\/www.asyncapi.com\/blog\/websocket-part2\r\n- https:\/\/www.asyncapi.com\/blog\/socketio-part1\r\n- https:\/\/www.asyncapi.com\/blog\/socketio-part2\r\n\r\n\r\n## Socket.IO Connection Tips\r\n\r\nWhen configuring a Socket.IO connection for use with Floatplane, there are some particular configurations to perform in order to prevent issues.\r\n\r\n- Path: `\/socket.io`\r\n\t- Floatplane's preferred Socket.IO path is `\/socket.io`.\r\n\t- By default, some client libraries will use a path of `\/engine.io` and may result in an HTTP 404 if used.\r\n- Secure: `true`\r\n\t- Floatplane is HTTPS\/WSS only, and has HTTP\/WS disabled.\r\n\t- Some client libraries have TLS disabled by default.\r\n- Transports: `websocket` \/ Secure: `true`\r\n\t- Floatplane appears to have HTTP long-polling disabled with their Engine.IO configuration, and thus the only option available is to use WebSockets.\r\n\t- When connecting to Floatplane's sockets, client libraries typically try to default to HTTP and only upgrade to WebSockets afterward. This may not work correctly with Floatplane, so attempt to connect via WebSockets by default.\r\n- Query \/ ConnectParams\r\n\t- Set the query or connection parameters like so:\r\n\t\t- `__sails_io_sdk_version`: `0.13.8`\r\n\t\t- `__sails_io_sdk_platform`: {your platform}\r\n\t\t- `__sails_io_sdk_language`: {your language}\r\n\t- These are required for Sails to initialize properly. Floatplane's Sails version defaults to the version to `0.9.0` which will throw an error when performing an Sails-related events, because it thinks your code will be too old to handle it.\r\n- Headers:\r\n\t- `Origin: https:\/\/www.floatplane.com\"`\r\n\t\t- For security-related purposes, Floatplane will deny WebSocket connections from what it thinks are other websites. This is to prevent cross-site request forgery. \r\n\t\t- When implementing an application in a browser, this is not customizable. But from a regular application, this is needed in order for Floatplane to trust your connection.\r\n\t- Cookies:\r\n\t\t- Some client libraries in Socket.IO have a separate configuration for Cookies, while others require you to bundle it in the `extraHeaders` configuration.\r\n\t\t- `sails.sid`\r\n\t\t\t- The `sails.sid` cookie is not required to make a raw Socket.IO connection with Floatplane, but will be required for making most Sails get\/post requests.\r\n\t\t\t- Otherwise, the socket connection is largely useless.",
		"license": {
			"name": "MIT",
			"url": "https://github.com/Jman012/FloatplaneAPI/blob/main/LICENSE"
		},
		"contact": {
			"name": "James Linnell",
			"url": "https://github.com/Jman012/FloatplaneAPI/"
		}
	},
	"servers": {
		"chat": {
			"url": "chat.floatplane.com/socket.io/?__sails_io_sdk_version={sailsVersion}&__sails_io_sdk_platform={sailsPlatform}&__sails_io_sdk_language={sailsVersion}&EIO=3&transport=websocket",
			"protocol": "wss",
			"description": "A client connects to Floatplane's asynchronous API via WebSockets with TLS (wss). The socket it connects to is goeverned by Sails, which requires specifying which version of Sails to use, as well as other parameters like the platform and language. The purpose of the `EIO` query parameter is unknown. If using a proper Sails client library, the parameters should be auto-filled for you, and simply connecting to `www.floatplane.com/socket.io/` should suffice.",
			"variables": {
				"sailsVersion": {
					"default": "0.13.8",
					"description": "The value `0.13.8` is the current value at the time of writing (2022-05-08). This gets updated every so often with updates to the Floatplane frontend. There may be compatibility issues if too old of a value is supplied (the Sails backend may reject the connection). It is important to keep this value as up-to-date as possible, in order to prevent rejected connection issues.",
					"examples": [
						"0.13.8"
					]
				},
				"sailsPlatform": {
					"default": "browser",
					"description": "The value `browser` is the current value used by the Sails JS client library. It is not known what effect values other than those defined by Sails may have on the socket connection.",
					"examples": [
						"browser",
						"node"
					]
				},
				"sailsLanguage": {
					"default": "javascript",
					"description": "The value `javascript` is the current value used by the Sails JS client library. It is not known what effect values other than `javascript` may have on the socket connection.",
					"examples": [
						"javascript"
					]
				}
			}
		}
	},
	"channels": {
		"/": {
			"description": "Socket.IO and Sails groups messages and events into different namespaces, with `/` being the default namespace. Multiple kinds of messages can be sent in a single namespace, with Socket.IO having its own mechanisms to differentiate message types. Floatplane only uses the root Socket.IO namespace (`/`).",
			"publish": {
				"message": {
					"oneOf": [
						{
							"$ref": "#/components/messages/SailsGet"
						},
						{
							"$ref": "#/components/messages/SailsPost"
						}
					]
				}
			},
			"subscribe": {
				"message": {
					"oneOf": [
						{
							"$ref": "#/components/messages/RadioChatter"
						}
					]
				}
			},
			"bindings": {
				"ws": {
					"method": "GET",
					"headers": {
						"description": "The `sails.sid` cookie must be sent upon connecting to the socket for authentication with the server. This is the authentication cookie from the Floatplane website used to identify the user.",
						"type": "object",
						"properties": {
							"Cookies": {
								"type": "string",
								"description": "Should contain a value for `sails.sid`."
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"messages": {
			"SailsGet": {
				"name": "get",
				"title": "Sails HTTP GET",
				"summary": "HTTP GET via Sails socket connection",
				"description": "This one asynchronous Sails/Socket.IO event may contain different Floatplane events in the payload, and contain different Floatplane events in the response/acknowledgement (depending on the request).",
				"contentType": "application/json",
				"payload": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/JoinLivestreamRadioFrequency"
						},
						{
							"$ref": "#/components/schemas/GetChatUserList"
						}
					]
				},
				"examples": [
					{
						"name": "JoinLivestreamRadioFrequency",
						"summary": "Connecting to a Floatplane livestream via a Sails HTTP GET.",
						"payload": {
							"method": "get",
							"headers": {},
							"data": {
								"channel": "/live/5c13f3c006f1be15e08e05c0",
								"message": null
							},
							"url": "/RadioMessage/joinLivestreamRadioFrequency"
						}
					},
					{
						"name": "GetChatUserList",
						"summary": "Retrieve the user list in a livestream chat via a Sails HTTP GET.",
						"payload": {
							"method": "get",
							"headers": {},
							"data": {
								"channel": "/live/5c13f3c006f1be15e08e05c0"
							},
							"url": "/RadioMessage/getChatUserList/"
						}
					}
				],
				"x-ack": {
					"args": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/JoinedLivestreamRadioFrequency"
							},
							{
								"$ref": "#/components/schemas/ChatUserList"
							}
						]
					},
					"examples": [
						{
							"name": "JoinedLivestreamRadioFrequency",
							"summary": "Successful response from a `JoinLivestreamRadioFrequency` message.",
							"payload": {
								"body": {
									"success": true,
									"emotes": [
										{
											"code": "meow",
											"image": "https://pbs.floatplanecdn.com/emotes/global/430846941512581_1549005125768.png"
										},
										{
											"code": "wan",
											"image": "https://pbs.floatplanecdn.com/emotes/global/128262935123759_1549055965843.png"
										},
										{
											"code": "soontm",
											"image": "https://pbs.floatplanecdn.com/emotes/global/424666970631704_1549055985375.png"
										}
									]
								},
								"headers": {},
								"statusCode": 200
							}
						},
						{
							"name": "ChatUserList",
							"summary": "Successful response from a `GetChatUserList` message.",
							"payload": {
								"body": {
									"success": true,
									"pilots": [],
									"passengers": [
										"username1"
									]
								},
								"headers": {},
								"statusCode": 200
							}
						}
					]
				}
			},
			"SailsPost": {
				"name": "post",
				"title": "Sails HTTP POST",
				"summary": "HTTP POST via Sails socket connection",
				"description": "This one asynchronous Sails/Socket.IO event may contain different Floatplane events in the payload, and contain different Floatplane events in the response/acknowledgement (depending on the request).",
				"contentType": "application/json",
				"payload": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/SendLivestreamRadioChatter"
						},
						{
							"$ref": "#/components/schemas/LeaveLivestreamRadioFrequency"
						}
					]
				},
				"examples": [
					{
						"name": "SendLivestreamRadioChatter",
						"summary": "Send a livestream chat message via a Sails HTTP POST.",
						"payload": {
							"method": "post",
							"headers": {},
							"data": {
								"channel": "/live/5c13f3c006f1be15e08e05c0",
								"message": "test"
							},
							"url": "/RadioMessage/sendLivestreamRadioChatter/"
						}
					},
					{
						"name": "LeaveLivestreamRadioFrequency",
						"summary": "Leave a Floatplane livestream via a Sails HTTP POST.",
						"payload": {
							"method": "post",
							"headers": {},
							"data": {
								"channel": "/live/5c13f3c006f1be15e08e05c0",
								"message": "bye!"
							},
							"url": "/RadioMessage/leaveLivestreamRadioFrequency"
						}
					}
				],
				"x-ack": {
					"args": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/SentLivestreamRadioChatter"
							},
							{
								"$ref": "#/components/schemas/LeftLivestreamRadioFrequency"
							}
						]
					},
					"examples": [
						{
							"name": "SentLivestreamRadioChatter",
							"summary": "Successful response from a `SendLivestreamRadioChatter` message.",
							"payload": {
								"body": {
									"id": "cl30pgqfr01x301eh212rdr8q",
									"userGUID": "5fb69b4f8573b6cd8cc7f3b0",
									"username": "jamamp",
									"channel": "/live/5c13f3c006f1be15e08e05c0",
									"message": "test",
									"userType": "Normal",
									"emotes": [],
									"success": true
								},
								"headers": {},
								"statusCode": 200
							}
						},
						{
							"name": "LeftLivestreamRadioFrequency",
							"summary": "Response from a `LeaveLivestreamRadioFrequency` message. Note that Floatplane currently sends a 404 back, so this might be bugged on their end.",
							"payload": {
								"body": "Not Found",
								"headers": {},
								"statusCode": 404
							}
						}
					]
				}
			},
			"RadioChatter": {
				"name": "radioChatter",
				"title": "Floatplane Livestream Radio Chatter",
				"summary": "A radio chatter event arrives from Floatplane after joining a livestream via `/RadioMessage/joinLivestreamRadioFrequency`.",
				"description": "These events are primarily incoming chats from others in the livestream chat room, specifying who sent the chat, the message of the chat, and other meta data.",
				"contentType": "application/json",
				"payload": {
					"$ref": "#/components/schemas/RadioChatter"
				},
				"examples": [
					{
						"payload": {
							"id": "cl30pgqfr01x301eh212rdr8q",
							"userGUID": "5fb69b4f8573b6cd8cc7f3b0",
							"username": "jamamp",
							"channel": "/live/5c13f3c006f1be15e08e05c0",
							"message": "test",
							"userType": "Normal",
							"emotes": [],
							"success": true
						}
					}
				]
			}
		},
		"schemas": {
			"SailsHeaders": {
				"type": "object",
				"description": "Headers by Sails are not being used by Floatplane. Not much is known of this structure at this time.",
				"additionalProperties": true
			},
			"SailsStatusCode": {
				"type": "integer",
				"description": "These are the same as HTTP response status codes.",
				"minimum": 200,
				"maximum": 599
			},
			"JoinLivestreamRadioFrequency": {
				"type": "object",
				"description": "Join a livestream chat channel in order to receive chat messages (via the `radioChatter` event) from others in the room.",
				"properties": {
					"method": {
						"const": "get",
						"description": "This endpoint expects a GET."
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"data": {
						"type": "object",
						"properties": {
							"channel": {
								"type": "string",
								"description": "Which livestream channel to join. Of the format `/live/{livestreamId}`. The `livestreamId` comes from the `liveStream` object on the creator's info in the REST API."
							},
							"message": {
								"type": "string",
								"description": "When joining, this is usually `null`."
							}
						},
						"additionalProperties": false,
						"required": [
							"channel"
						]
					},
					"url": {
						"const": "/RadioMessage/joinLivestreamRadioFrequency",
						"description": "The required endpoint for this event."
					}
				},
				"additionalProperties": false
			},
			"JoinedLivestreamRadioFrequency": {
				"type": "object",
				"description": "Indicates that the channel has been joined successfully, as well as sending the current emotes configured for the livestream.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"success": {
								"type": "boolean"
							},
							"emotes": {
								"$ref": "#/components/schemas/EmoteList"
							}
						},
						"required": [
							"success",
							"emotes"
						]
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"url": {
						"const": "/RadioMessage/leaveLivestreamRadioFrequency",
						"description": "The required endpoint for this event."
					}
				}
			},
			"LeaveLivestreamRadioFrequency": {
				"type": "object",
				"description": "Tells the server that this socket should no longer receive `radioChatter` events from the previously-joined channel.",
				"properties": {
					"method": {
						"const": "post",
						"description": "This endpoint expects a POST."
					},
					"body": {
						"type": "object",
						"properties": {
							"channel": {
								"type": "string",
								"description": "Which livestream channel to leave. Of the format `/live/{livestreamId}`."
							},
							"message": {
								"type": "string",
								"description": "This message does not appear to be relayed to others in the chat."
							}
						},
						"additionalProperties": false,
						"required": [
							"channel"
						]
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				},
				"additionalProperties": false
			},
			"LeftLivestreamRadioFrequency": {
				"type": "object",
				"properties": {
					"body": {
						"type": "object"
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				}
			},
			"GetChatUserList": {
				"type": "object",
				"description": "Returns a list of users currently in the channel/livestream/chat room, in order to display a full list in the UI.",
				"properties": {
					"method": {
						"const": "get",
						"description": "This endpoint expects a GET."
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"data": {
						"type": "object",
						"properties": {
							"channel": {
								"type": "string",
								"description": "Which livestream channel to query. Of the format `/live/{livestreamId}`."
							}
						},
						"additionalProperties": false,
						"required": [
							"channel"
						]
					},
					"url": {
						"const": "/RadioMessage/getChatUserList/",
						"description": "The required endpoint for this event."
					}
				},
				"additionalProperties": false
			},
			"ChatUserList": {
				"type": "object",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"success": {
								"type": "boolean"
							},
							"pilots": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"passengers": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						},
						"required": [
							"success",
							"pilots",
							"passengers"
						]
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				}
			},
			"SendLivestreamRadioChatter": {
				"type": "object",
				"description": "Sends a chat message to the specified livestream channel for other users to see. Note that sending a chat message will both receive a Sails HTTP response as well as a `radioChatter` event from yourself.",
				"properties": {
					"method": {
						"const": "post",
						"description": "This endpoint expects a POST."
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"data": {
						"type": "object",
						"properties": {
							"channel": {
								"type": "string",
								"description": "Which livestream channel to send a chat to. Of the format `/live/{livestreamId}`."
							},
							"message": {
								"type": "string",
								"description": "Message contents. May contain emotes, a word surrounded by colons. In order to send a valid emote, it should be an emote code that is returned in the `JoinedLivestreamRadioFrequency` response."
							}
						},
						"additionalProperties": false,
						"required": [
							"channel",
							"message"
						]
					},
					"url": {
						"const": "/RadioMessage/sendLivestreamRadioChatter/",
						"description": "The required endpoint for this event."
					}
				},
				"additionalProperties": false
			},
			"SentLivestreamRadioChatter": {
				"type": "object",
				"properties": {
					"body": {
						"$ref": "#/components/schemas/RadioChatter"
					},
					"headers": {
						"$ref": "#/components/schemas/SailsHeaders"
					},
					"statusCode": {
						"$ref": "#/components/schemas/SailsStatusCode"
					}
				}
			},
			"RadioChatter": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identifier of the chat message itself. Should be unique per radio chatter."
					},
					"userGUID": {
						"type": "string",
						"description": "Identifier of the user sending the message."
					},
					"username": {
						"type": "string",
						"description": "Display name of the user sending the message."
					},
					"channel": {
						"type": "string",
						"description": "Which livestream the radio chatter is from. Of the format `/live/{livestreamId}`."
					},
					"message": {
						"type": "string",
						"description": "Message contents. May contain emotes, a word surrounded by colons. If the emote is valid for the user, the emote code and image path are included in `emotes` below."
					},
					"userType": {
						"type": "string",
						"enum": [
							"Normal",
							"Moderator"
						]
					},
					"emotes": {
						"$ref": "#/components/schemas/EmoteList"
					},
					"success": {
						"type": "boolean",
						"description": "Included in `radioChatter` events and is usually `true`, but mainly useful in `SentLivestreamRadioChatter` responses to indicate if sending the message was successful. An example of why it might not work is using an invalid emote, or some system problem."
					}
				},
				"required": [
					"id",
					"userGUID",
					"username",
					"channel",
					"message",
					"userType"
				]
			},
			"EmoteList": {
				"type": "array",
				"description": "When the user types this `code` in their message, surrounded by two colons (`:`), that portion of the message should be replaced with the `image` property in the UI.",
				"items": {
					"type": "object",
					"properties": {
						"code": {
							"type": "string"
						},
						"image": {
							"type": "string"
						}
					},
					"required": [
						"code",
						"image"
					]
				}
			}
		}
	}
}
